(module katdotnvim.utils.export.init
  {autoload {hsl externals.hsluv
             ucolors katdotnvim.utils.color
             colors katdotnvim.color
             groups katdotnvim.highlights.main
             main katdotnvim.main
             kitty katdotnvim.utils.export.kitty
             a aniseed.core}
   require-macros [katdotnvim.utils.macros]})

; FN -- generate the string necessary from the kittyColors output
; @colors -- table of color values generated
; @terminal -- the terminal we want to generate the string for
; $output -- a string formatted for kitty colorscheme format
(defn generateString [colors terminal]
  (var output (string.format "# %s terminal theme generated by kat.nvim\n# Generated using %s colorscheme with background set to %s\n\n"
                             terminal
                             (tostring vim.g.colors_name)
                             (tostring vim.o.background)))
  (each [key val (pairs colors)]
    (set output (string.format "%s%s %s\n" output key val)))
  output)

; FN -- notify the user that a terminal theme was generated for said colorscheme
(defn userExportNotify [terminal]
  (vim.notify (string.format "kat.nvim: %s color file generated at cwd using %s colorscheme with %s background"
                             terminal
                             (tostring vim.g.colors_name)
                             (tostring vim.o.background))
              vim.log.levels.INFO))

; FN -- wrap terminal generation for a single function
(defn generateTerminalColors [terminal]
  (match (tostring terminal)
    :kitty (kitty.generateKittyTheme)))

; create user command for terminal color generation
(command- KatGenTermTheme {:nargs 1}
          "lua require('katdotnvim.utils.export.init').generateTerminalColors(<args>)")
