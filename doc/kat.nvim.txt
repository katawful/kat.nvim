*kat.nvim.txt*                     Functionality for the kat.nvim colorscheme


>
		     __         __               _
		    / /______ _/ /_  ____ _   __(_)___ ___
		   / //_/ __  / __/ / __ \ | / / / __  __ \
		  / ,< / /_/ / /__ / / / / |/ / / / / / / /
		 /_/|_|\__,_/\__(_)_/ /_/|___/_/_/ /_/ /_/
<

This is a warm blue theme with 4 variations. It is written in Fennel with
Aniseed, and is generated dynamically. This help file goes over the main
functionalities of this colorscheme

==============================================================================
CONTENTS                                                     *kat.nvim-contents*

1. Options............................................|kat.nvim-options|
2. Terminal Support ..................................|kat.nvim-terminal|
3. Supported Plugins..................................|kat.nvim-plugins|
4. Supported Filetypes................................|kat.nvim-filetypes|
5. Rendering..........................................|kat.nvim-render|
6. Using in Other Plugins.............................|kat.nvim-develop|
7. Contributing.......................................|kat.nvim-contributing|

==============================================================================
Section 1: Options                                            *kat.nvim-options*

These are all the various options that the user can interact with.

------------------------------------------------------------------------------
Section 1a: Colorschemes                         *kat.nvim-options.colorschemes*
Colorschemes are controlled by NeoVim's internal colorscheme management as
well as the 'background' global option:

			`kat.nvim`    -   hard contrast
			`kat.nwim`    -   soft contrast

Set your desired background with the 'background' option.

------------------------------------------------------------------------------
Section 1b: Vim global variables                    *kat.nvim-options.variables*

These `g` variables control internal colorscheme options.

*g:kat_nvim_commentStyle*
Deprecated option. Use a |kat.nvim-overrides| instead.

*g:kat_nvim_integrations*
An unordered list of strings that determines what plugins support is loaded.
Default:
	   `let g:kat_nvim_integrations = {"lsp",`
					  `"treesitter",`
					  `"startify",`
					  `"ts_rainbow",`
					  `"indent_blankline",`
					  `"coc",`
					  `"cmp",`
					`  "fugitive"`
					 ` "gitsigns"}`
See |kat.nvim-plugins| for what these correspond to.

*g:kat_nvim_filetype*
An unordered list of strings that determines what filetype support is loaded.
Default:
	   `let g:kat_nvim_filetype = {"vim",`
				      `"markdown",`
				      `"vimwiki"}`
Note that these use the |filetype| name.

*g:kat_nvim_stupidFeatures*
Considered unstable and subject to changes.

A boolean that enables the pointless features I have added to this plugin.
Currently it only supports fading |hl-Function| highlight group. It works
fairly well, but I cannot guarantee its use nor performance.

*g:kat_nvim_max_version*
A string that denotes the max supported Neovim version for using this plugin.
Sets to the current supported Neovim version by default.

*g:kat_nvim_dont_render*
Deprecated

*g:kat_nvim_compile_enable*
Deprecated

==============================================================================
Section 2: Terminal Support               *kat.nvim-terminal* *:KatGenTermTheme*
Terminal colors can be generated for the following GUI aware terminals with
the command `:KatGenTermTheme terminal`, which generates an appropriate
config file for the desired terminal:

		       `Terminal : Setting`
        		  kitty : 'kitty'
		      alacritty : 'alacritty'
		   rxvt-unicode : 'rxvt-unicode', 'urxvt'
		   	konsole : 'konsole'

Example for the kitty terminal:
			`KatGenTermTheme kitty`
Generates:
			`kitty-kat.nvim-dark.conf`
when generating with kat.nvim with a dark background. These files can be used
for importing in supported terminal configs.

To generate all 4 variations at once in the same directory, use `all` as the
second argument:
                       `KatGenTermTheme kitty all`

==============================================================================
Section 3: Supported Plugins                                  *kat.nvim-plugins*
This is the list of plugins that match this colorscheme.

			      `Plugin : Setting`
			  Native LSP : 'lsp'
			 tree-sitter : 'treesitter'
			    Startify : 'startify'
			  TS Rainbow : 'ts_rainbow'
		    indent-blankline : 'indent_blankline'
			    coc.nvim : 'coc'
			    nvim-cmp : 'cmp'
			  bufferline : 'bufferline'
			   lightline : Use plugin settings: 'kat'
			     Airline : Use plugin settings: 'kat'
			     Lualine : Use plugin settings: 'kat'
			     Fugitive: 'fugitive'
			     Gitsigns: 'gitsigns'

==============================================================================
Section 4: Supported Filetypes                              *kat.nvim-filetypes*
This is the list of filetypes that match this colorscheme.

			    `Filetype : Setting`
			   Vimscript : 'vim'
			    Markdown : 'markdown'
			     Vimwiki : 'vimwiki'

==============================================================================
Section 5: Rendering to File                                   *kat.nvim-render*
All the colors for this colorscheme can be rendered. A user-command is
provided: `KatNvimRender`. This will render JSON files to `stdpath(data)` in
the folder `kat/kat.nvim/json`. For example on Linux:

`/home/user/.local/share/nvim/kat/kat.nvim/json/`

kat.nvim will use these files first before resorting to the dynamic method.

------------------------------------------------------------------------------
Section 5a: Overrides                                       *kat.nvim-overrides*
Overrides for groups can be defined, which will be loaded with the same method
for rendered files.

>
  local render = require('katdotnvim.utils.export.render')
  local my_overrides = function ()
      render.override_all({
	  source = "kat",
	  {
	      {group = "Normal", fg = "#ffffff", default = true},
	      {group = "Visual", fg = "#ff0000", default = true}}})

      local color = function ()
	  if vim.o.background == "light" then
	      return "#000000"
	  else
	      return "#ffffff"
	  end
      end

      render.override ({
	  source = "kat",
	  light_hard = {
	      {group = "Normal", fg = color(), default = true},
	      {group = "Visual", fg = "#ff0000", default = true}}})
      render.override ({
	  source = "kat",
	  light_soft = {
	      {group = "Normal", fg = color(), default = true},
	      {group = "Visual", fg = "#ff0000", default = true}}})
      render.override ({
	  source = "kat",
	  dark_hard = {
	      {group = "Normal", fg = color(), default = true},
	      {group = "Visual", fg = "#ff0000", default = true}}})
      render.override ({
	  source = "kat",
	  dark_soft = {
	      {group = "Normal", fg = color(), default = true},
	      {group = "Visual", fg = "#ff0000", default = true}}})
  end
  vim.api.nvim_create_user_command("MyOverrides", my_overrides, {})
<


Overrides can be defined, which will be loaded with the same method.
There are 2 override functions:

- `override`: Define an override for a variation of kat.nvim
- `override_all`: Define an override for all variations of kat.nvim

`override_all` cannot change values for the group based upon values like
`vim.o.background` or kat.nvim's current contrast. `override` should be used
for that instead.

Both functions take a table with 2 keys: both take a `source` key with a
string value corresponding to a name of your desire (like computer username).
For `override_all`, the second key is a unnamed table of highlight groups. For
`override`, the second key must be one of the following:

			    'light_hard'
			    'light_soft'
			    'dark_hard'
			    'dark_soft'

It is recommended to define all 4, but it is not required.

------------------------------------------------------------------------------
Section 5b: Highlight Table                                  *kat.nvim-hl-table*
This colorscheme uses a custom highlight table to consolidate everything. It
is mostly based on the opts table for `nvim_set_hl`, but with added keys:

>
    group = "hl-group-name, a string",
    fg = "gui-fg, any valid color",
    bg = "gui-bg, any valid color",
    ctermfg = "cterm-fg, a number 0-255",
    ctermbg = "cterm-bg, a number 0-255",
    sp = "gui hl for special highlights, any valid color",
    attr = "one of the possible attributes, true",
    default = "only overwrite values found in this table, true. different from the built in default key",
<

While it isn't generally needed for overrides (as you have the 'default' key),
all 4 color keys can take `"SKIP"` and `"NONE"` as additional values. "SKIP"
simply does not try to overwrite any value found, while "NONE" directly sets
the value to empty.

See |attr-list| for the list of attribute keys possible.

>
    -- Example highlight table
    {
	group = "Normal",
	fg = "#000000",
	bg = "#ffffff",
	ctermfg = 7,
	ctermbg = 0,
	bold = true,
	italic = true,
	undercurl = true,
	sp = "#ff0000",
    }

    -- Just link a group
    {
	group = "TSVariable",
	link = "Variable",
	-- the rest are ignored because of 'link' key
	fg = "#ffffff",
	-- ...
    }

    -- Only update a group
    {
	group = "Visual",
	default = true,
	bold = true,
    }
<

==============================================================================
Section 6: Using in Other Plugins                             *kat.nvim-develop*
The Lua module `katdotnvim.color` provides all the colors used for this
colorscheme within the table `kat`. There are 10 sub-tables within `kat`:
                                                       *kat.nvim-develop-colors*

                           'pink'
			   'red'
			   'blue'
			   'green'
			   'purple'
			   'orange'
			   'teal'
			   'plum'
			   'fg'
			   'bg'

'fg' and 'bg' are the foreground and background colors. They are generally not
mixed with other colors, but rather come from earlier definitions. The other
color tables contain the various mixings used throughout this colorscheme.

Within each color table contains a table of the colors themselves, each with 2
keys: 'desc' and 'color'.

------------------------------------------------------------------------------
Section 6a: Example                                   *kat.nvim-develop.example*

>
    local pink = require("katdotnvim.color").kat.pink
    vim.api.nvim_set_hl(0, "Normal", {guifg = pink.base.color})
<

------------------------------------------------------------------------------
Section 6b: Printing Color Table Descriptions         *kat.nvim-develop-snippet*

>
    vim.api.nvim_create_user_command("KatColor",
	function(args)
	    local output = {}
	    for _, color in pairs(args.fargs) do
		local col_table = require("katdotnvim.color").kat[color]
		if col_table then
		    output[color] = {}
		    for key, value in pairs(col_table) do
			output[color][key] = value.desc
		    end
		end
	    end
	    table.sort(output)
	    print(vim.inspect(output))
	end, {nargs = "+"})
<

This prints just the description of each of |kat.nvim-develop.colors| passed
as arguments to the user-command. Simply execute this somewhere and use at
your leisure.

==============================================================================
Section 7: Contributing                                  *kat.nvim-contributing*
I am open to expanding this colorscheme, but do this using Fennel with
Aniseed, there are some peculiarities with how it needs to be developed. The
most obvious example is that it must be developed entirely in Fennel with
Aniseed. I won't accept Lua code or Aniseed-less Fennel code. Fennel isn't
that hard to learn, and you can mostly just copy an equivalent file.

------------------------------------------------------------------------------
Section 7a: Color Table                  *kat.nvim-contributing.color-table*
Prioritize the colors in |kat.nvim-develop|. 

------------------------------------------------------------------------------
Section 7c: Compiling                          *kat.nvim-contributing.compiling*
In order to compile this with make, you must have a local build of fennel in
the root directory of this repository. It is not provided. It is currently
used to build the files in `/colors`.

------------------------------------------------------------------------------
Section 7d: fnlfmt                                *kat.nvim-contributing.fnlfmt*
fnlfmt, assuming it is in your `$PATH`, can be used with `make format` to
format all files. Make sure to check anything you add for ideal formatting and
add a skip header if needed

------------------------------------------------------------------------------
Section 7e: Structure                          *kat.nvim-contributing.structure*
Put the files in the right spot, filetypes go in
`katdotnvim.highlights.filetype`. Plugins go in
`katdotnvim.highlights.integrations`.

------------------------------------------------------------------------------
Section 7f: Adding Options                       *kat.nvim-contributing.options*
If you add a filetype or plugin integration, or add a new global variable,
make sure to add the defaults into the set defaults function in
`katdotnvim.utils.error`.

vim:tw=78:isk=!-~,^*,^\|,^\":ts=8:noet:ft=help:norl:
